// <auto-generated/>
#pragma warning disable CS0618
using FusionAuth.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace FusionAuth.Sdk.Api.TwoFactor.Status.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \api\two-factor\status\{twoFactorTrustId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTwoFactorTrustItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTwoFactorTrustItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/two-factor/status/{twoFactorTrustId}{?applicationId*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTwoFactorTrustItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/two-factor/status/{twoFactorTrustId}{?applicationId*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve a user&apos;s two-factor status.  This can be used to see if a user will need to complete a two-factor challenge to complete a login, and optionally identify the state of the two-factor trust across various applications.
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.TwoFactorStatusResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::FusionAuth.Sdk.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FusionAuth.Sdk.Models.TwoFactorStatusResponse?> GetAsync(Action<RequestConfiguration<global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder.WithTwoFactorTrustItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FusionAuth.Sdk.Models.TwoFactorStatusResponse> GetAsync(Action<RequestConfiguration<global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder.WithTwoFactorTrustItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::FusionAuth.Sdk.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::FusionAuth.Sdk.Models.TwoFactorStatusResponse>(requestInfo, global::FusionAuth.Sdk.Models.TwoFactorStatusResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a user&apos;s two-factor status.  This can be used to see if a user will need to complete a two-factor challenge to complete a login, and optionally identify the state of the two-factor trust across various applications.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder.WithTwoFactorTrustItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder.WithTwoFactorTrustItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve a user&apos;s two-factor status.  This can be used to see if a user will need to complete a two-factor challenge to complete a login, and optionally identify the state of the two-factor trust across various applications.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTwoFactorTrustItemRequestBuilderGetQueryParameters 
        {
            /// <summary>The optional applicationId to verify.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("applicationId")]
            public string? ApplicationId { get; set; }
#nullable restore
#else
            [QueryParameter("applicationId")]
            public string ApplicationId { get; set; }
#endif
            /// <summary>The user Id to retrieve the Two-Factor status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("userId")]
            public string? UserId { get; set; }
#nullable restore
#else
            [QueryParameter("userId")]
            public string UserId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTwoFactorTrustItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FusionAuth.Sdk.Api.TwoFactor.Status.Item.WithTwoFactorTrustItemRequestBuilder.WithTwoFactorTrustItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
