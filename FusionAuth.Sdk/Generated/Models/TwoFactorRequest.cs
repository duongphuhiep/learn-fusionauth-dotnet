// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TwoFactorRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The applicationId property</summary>
        public Guid? ApplicationId { get; set; }
        /// <summary>The authenticatorId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticatorId { get; set; }
#nullable restore
#else
        public string AuthenticatorId { get; set; }
#endif
        /// <summary>The code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Information about a user event (login, register, etc) that helps identify the source of the event (location, device type, OS, etc).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.EventInfo? EventInfo { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.EventInfo EventInfo { get; set; }
#endif
        /// <summary>The method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Method { get; set; }
#nullable restore
#else
        public string Method { get; set; }
#endif
        /// <summary>The mobilePhone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>The secret property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Secret { get; set; }
#nullable restore
#else
        public string Secret { get; set; }
#endif
        /// <summary>The secretBase32Encoded property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecretBase32Encoded { get; set; }
#nullable restore
#else
        public string SecretBase32Encoded { get; set; }
#endif
        /// <summary>The twoFactorId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwoFactorId { get; set; }
#nullable restore
#else
        public string TwoFactorId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.TwoFactorRequest"/> and sets the default values.
        /// </summary>
        public TwoFactorRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.TwoFactorRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.TwoFactorRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.TwoFactorRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "applicationId", n => { ApplicationId = n.GetGuidValue(); } },
                { "authenticatorId", n => { AuthenticatorId = n.GetStringValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "eventInfo", n => { EventInfo = n.GetObjectValue<global::FusionAuth.Sdk.Models.EventInfo>(global::FusionAuth.Sdk.Models.EventInfo.CreateFromDiscriminatorValue); } },
                { "method", n => { Method = n.GetStringValue(); } },
                { "mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                { "secret", n => { Secret = n.GetStringValue(); } },
                { "secretBase32Encoded", n => { SecretBase32Encoded = n.GetStringValue(); } },
                { "twoFactorId", n => { TwoFactorId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("applicationId", ApplicationId);
            writer.WriteStringValue("authenticatorId", AuthenticatorId);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("email", Email);
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.EventInfo>("eventInfo", EventInfo);
            writer.WriteStringValue("method", Method);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteStringValue("secret", Secret);
            writer.WriteStringValue("secretBase32Encoded", SecretBase32Encoded);
            writer.WriteStringValue("twoFactorId", TwoFactorId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
