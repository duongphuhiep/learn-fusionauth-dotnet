// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    /// <summary>
    /// SAML v2 IdP Initiated identity provider configuration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SAMLv2IdPInitiatedIdentityProvider : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Configuration for encrypted assertions when acting as SAML Service Provider</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.SAMLv2AssertionDecryptionConfiguration? AssertionDecryptionConfiguration { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.SAMLv2AssertionDecryptionConfiguration AssertionDecryptionConfiguration { get; set; }
#endif
        /// <summary>The emailClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailClaim { get; set; }
#nullable restore
#else
        public string EmailClaim { get; set; }
#endif
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The keyId property</summary>
        public Guid? KeyId { get; set; }
        /// <summary>The uniqueIdClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueIdClaim { get; set; }
#nullable restore
#else
        public string UniqueIdClaim { get; set; }
#endif
        /// <summary>The useNameIdForEmail property</summary>
        public bool? UseNameIdForEmail { get; set; }
        /// <summary>The usernameClaim property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UsernameClaim { get; set; }
#nullable restore
#else
        public string UsernameClaim { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.SAMLv2IdPInitiatedIdentityProvider"/> and sets the default values.
        /// </summary>
        public SAMLv2IdPInitiatedIdentityProvider()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.SAMLv2IdPInitiatedIdentityProvider"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.SAMLv2IdPInitiatedIdentityProvider CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.SAMLv2IdPInitiatedIdentityProvider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assertionDecryptionConfiguration", n => { AssertionDecryptionConfiguration = n.GetObjectValue<global::FusionAuth.Sdk.Models.SAMLv2AssertionDecryptionConfiguration>(global::FusionAuth.Sdk.Models.SAMLv2AssertionDecryptionConfiguration.CreateFromDiscriminatorValue); } },
                { "emailClaim", n => { EmailClaim = n.GetStringValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "keyId", n => { KeyId = n.GetGuidValue(); } },
                { "uniqueIdClaim", n => { UniqueIdClaim = n.GetStringValue(); } },
                { "useNameIdForEmail", n => { UseNameIdForEmail = n.GetBoolValue(); } },
                { "usernameClaim", n => { UsernameClaim = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.SAMLv2AssertionDecryptionConfiguration>("assertionDecryptionConfiguration", AssertionDecryptionConfiguration);
            writer.WriteStringValue("emailClaim", EmailClaim);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteGuidValue("keyId", KeyId);
            writer.WriteStringValue("uniqueIdClaim", UniqueIdClaim);
            writer.WriteBoolValue("useNameIdForEmail", UseNameIdForEmail);
            writer.WriteStringValue("usernameClaim", UsernameClaim);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
