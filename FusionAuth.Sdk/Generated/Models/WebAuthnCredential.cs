// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    /// <summary>
    /// A User&apos;s WebAuthnCredential. Contains all data required to complete WebAuthn authentication ceremonies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WebAuthnCredential : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A number identifying a cryptographic algorithm. Values should be registered with the &lt;a  href=&quot;https:www.iana.orgassignmentscosecose.xhtml#algorithms&quot;&gt;IANA COSE Algorithms registry&lt;a&gt;</summary>
        public global::FusionAuth.Sdk.Models.CoseAlgorithmIdentifier? Algorithm { get; set; }
        /// <summary>Used to indicate what type of attestation was included in the authenticator response for a given WebAuthn credential at the time it was created</summary>
        public global::FusionAuth.Sdk.Models.AttestationType? AttestationType { get; set; }
        /// <summary>The authenticatorSupportsUserVerification property</summary>
        public bool? AuthenticatorSupportsUserVerification { get; set; }
        /// <summary>The credentialId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CredentialId { get; set; }
#nullable restore
#else
        public string CredentialId { get; set; }
#endif
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.WebAuthnCredential_data? Data { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.WebAuthnCredential_data Data { get; set; }
#endif
        /// <summary>The discoverable property</summary>
        public bool? Discoverable { get; set; }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? InsertInstant { get; set; }
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? LastUseInstant { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The publicKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicKey { get; set; }
#nullable restore
#else
        public string PublicKey { get; set; }
#endif
        /// <summary>The relyingPartyId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelyingPartyId { get; set; }
#nullable restore
#else
        public string RelyingPartyId { get; set; }
#endif
        /// <summary>The signCount property</summary>
        public int? SignCount { get; set; }
        /// <summary>The tenantId property</summary>
        public Guid? TenantId { get; set; }
        /// <summary>The transports property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Transports { get; set; }
#nullable restore
#else
        public List<string> Transports { get; set; }
#endif
        /// <summary>The userAgent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>The userId property</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.WebAuthnCredential"/> and sets the default values.
        /// </summary>
        public WebAuthnCredential()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.WebAuthnCredential"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.WebAuthnCredential CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.WebAuthnCredential();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "algorithm", n => { Algorithm = n.GetEnumValue<global::FusionAuth.Sdk.Models.CoseAlgorithmIdentifier>(); } },
                { "attestationType", n => { AttestationType = n.GetEnumValue<global::FusionAuth.Sdk.Models.AttestationType>(); } },
                { "authenticatorSupportsUserVerification", n => { AuthenticatorSupportsUserVerification = n.GetBoolValue(); } },
                { "credentialId", n => { CredentialId = n.GetStringValue(); } },
                { "data", n => { Data = n.GetObjectValue<global::FusionAuth.Sdk.Models.WebAuthnCredential_data>(global::FusionAuth.Sdk.Models.WebAuthnCredential_data.CreateFromDiscriminatorValue); } },
                { "discoverable", n => { Discoverable = n.GetBoolValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "insertInstant", n => { InsertInstant = n.GetLongValue(); } },
                { "lastUseInstant", n => { LastUseInstant = n.GetLongValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "publicKey", n => { PublicKey = n.GetStringValue(); } },
                { "relyingPartyId", n => { RelyingPartyId = n.GetStringValue(); } },
                { "signCount", n => { SignCount = n.GetIntValue(); } },
                { "tenantId", n => { TenantId = n.GetGuidValue(); } },
                { "transports", n => { Transports = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userAgent", n => { UserAgent = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.CoseAlgorithmIdentifier>("algorithm", Algorithm);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.AttestationType>("attestationType", AttestationType);
            writer.WriteBoolValue("authenticatorSupportsUserVerification", AuthenticatorSupportsUserVerification);
            writer.WriteStringValue("credentialId", CredentialId);
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.WebAuthnCredential_data>("data", Data);
            writer.WriteBoolValue("discoverable", Discoverable);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteGuidValue("id", Id);
            writer.WriteLongValue("insertInstant", InsertInstant);
            writer.WriteLongValue("lastUseInstant", LastUseInstant);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("publicKey", PublicKey);
            writer.WriteStringValue("relyingPartyId", RelyingPartyId);
            writer.WriteIntValue("signCount", SignCount);
            writer.WriteGuidValue("tenantId", TenantId);
            writer.WriteCollectionOfPrimitiveValues<string>("transports", Transports);
            writer.WriteStringValue("userAgent", UserAgent);
            writer.WriteGuidValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
