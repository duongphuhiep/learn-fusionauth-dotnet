// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    /// <summary>
    /// A displayable raw login that includes application name and user loginId.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DisplayableRawLogin : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The applicationId property</summary>
        public Guid? ApplicationId { get; set; }
        /// <summary>The applicationName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationName { get; set; }
#nullable restore
#else
        public string ApplicationName { get; set; }
#endif
        /// <summary>The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.</summary>
        public long? Instant { get; set; }
        /// <summary>The ipAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>Location information. Useful for IP addresses and other displayable data objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.Location? Location { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.Location Location { get; set; }
#endif
        /// <summary>The loginId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LoginId { get; set; }
#nullable restore
#else
        public string LoginId { get; set; }
#endif
        /// <summary>Model identity types provided by FusionAuth.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.IdentityType? LoginIdType { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.IdentityType LoginIdType { get; set; }
#endif
        /// <summary>The userId property</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.DisplayableRawLogin"/> and sets the default values.
        /// </summary>
        public DisplayableRawLogin()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.DisplayableRawLogin"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.DisplayableRawLogin CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.DisplayableRawLogin();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "applicationId", n => { ApplicationId = n.GetGuidValue(); } },
                { "applicationName", n => { ApplicationName = n.GetStringValue(); } },
                { "instant", n => { Instant = n.GetLongValue(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::FusionAuth.Sdk.Models.Location>(global::FusionAuth.Sdk.Models.Location.CreateFromDiscriminatorValue); } },
                { "loginId", n => { LoginId = n.GetStringValue(); } },
                { "loginIdType", n => { LoginIdType = n.GetObjectValue<global::FusionAuth.Sdk.Models.IdentityType>(global::FusionAuth.Sdk.Models.IdentityType.CreateFromDiscriminatorValue); } },
                { "userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("applicationId", ApplicationId);
            writer.WriteStringValue("applicationName", ApplicationName);
            writer.WriteLongValue("instant", Instant);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.Location>("location", Location);
            writer.WriteStringValue("loginId", LoginId);
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.IdentityType>("loginIdType", LoginIdType);
            writer.WriteGuidValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
