// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    /// <summary>
    /// Theme object for values used in the css variables for simple themes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SimpleThemeVariables : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alertBackgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertBackgroundColor { get; set; }
#nullable restore
#else
        public string AlertBackgroundColor { get; set; }
#endif
        /// <summary>The alertFontColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlertFontColor { get; set; }
#nullable restore
#else
        public string AlertFontColor { get; set; }
#endif
        /// <summary>The backgroundImageURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundImageURL { get; set; }
#nullable restore
#else
        public string BackgroundImageURL { get; set; }
#endif
        /// <summary>The backgroundSize property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackgroundSize { get; set; }
#nullable restore
#else
        public string BackgroundSize { get; set; }
#endif
        /// <summary>The borderRadius property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BorderRadius { get; set; }
#nullable restore
#else
        public string BorderRadius { get; set; }
#endif
        /// <summary>The deleteButtonColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeleteButtonColor { get; set; }
#nullable restore
#else
        public string DeleteButtonColor { get; set; }
#endif
        /// <summary>The deleteButtonFocusColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeleteButtonFocusColor { get; set; }
#nullable restore
#else
        public string DeleteButtonFocusColor { get; set; }
#endif
        /// <summary>The deleteButtonTextColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeleteButtonTextColor { get; set; }
#nullable restore
#else
        public string DeleteButtonTextColor { get; set; }
#endif
        /// <summary>The deleteButtonTextFocusColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeleteButtonTextFocusColor { get; set; }
#nullable restore
#else
        public string DeleteButtonTextFocusColor { get; set; }
#endif
        /// <summary>The errorFontColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorFontColor { get; set; }
#nullable restore
#else
        public string ErrorFontColor { get; set; }
#endif
        /// <summary>The errorIconColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorIconColor { get; set; }
#nullable restore
#else
        public string ErrorIconColor { get; set; }
#endif
        /// <summary>The fontColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FontColor { get; set; }
#nullable restore
#else
        public string FontColor { get; set; }
#endif
        /// <summary>The fontFamily property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FontFamily { get; set; }
#nullable restore
#else
        public string FontFamily { get; set; }
#endif
        /// <summary>The footerDisplay property</summary>
        public bool? FooterDisplay { get; set; }
        /// <summary>The iconBackgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IconBackgroundColor { get; set; }
#nullable restore
#else
        public string IconBackgroundColor { get; set; }
#endif
        /// <summary>The iconColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IconColor { get; set; }
#nullable restore
#else
        public string IconColor { get; set; }
#endif
        /// <summary>The infoIconColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InfoIconColor { get; set; }
#nullable restore
#else
        public string InfoIconColor { get; set; }
#endif
        /// <summary>The inputBackgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InputBackgroundColor { get; set; }
#nullable restore
#else
        public string InputBackgroundColor { get; set; }
#endif
        /// <summary>The inputIconColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InputIconColor { get; set; }
#nullable restore
#else
        public string InputIconColor { get; set; }
#endif
        /// <summary>The inputTextColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InputTextColor { get; set; }
#nullable restore
#else
        public string InputTextColor { get; set; }
#endif
        /// <summary>The linkTextColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkTextColor { get; set; }
#nullable restore
#else
        public string LinkTextColor { get; set; }
#endif
        /// <summary>The linkTextFocusColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkTextFocusColor { get; set; }
#nullable restore
#else
        public string LinkTextFocusColor { get; set; }
#endif
        /// <summary>The logoImageSize property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoImageSize { get; set; }
#nullable restore
#else
        public string LogoImageSize { get; set; }
#endif
        /// <summary>The logoImageURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoImageURL { get; set; }
#nullable restore
#else
        public string LogoImageURL { get; set; }
#endif
        /// <summary>The monoFontColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MonoFontColor { get; set; }
#nullable restore
#else
        public string MonoFontColor { get; set; }
#endif
        /// <summary>The monoFontFamily property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MonoFontFamily { get; set; }
#nullable restore
#else
        public string MonoFontFamily { get; set; }
#endif
        /// <summary>The pageBackgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PageBackgroundColor { get; set; }
#nullable restore
#else
        public string PageBackgroundColor { get; set; }
#endif
        /// <summary>The panelBackgroundColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PanelBackgroundColor { get; set; }
#nullable restore
#else
        public string PanelBackgroundColor { get; set; }
#endif
        /// <summary>The primaryButtonColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryButtonColor { get; set; }
#nullable restore
#else
        public string PrimaryButtonColor { get; set; }
#endif
        /// <summary>The primaryButtonFocusColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryButtonFocusColor { get; set; }
#nullable restore
#else
        public string PrimaryButtonFocusColor { get; set; }
#endif
        /// <summary>The primaryButtonTextColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryButtonTextColor { get; set; }
#nullable restore
#else
        public string PrimaryButtonTextColor { get; set; }
#endif
        /// <summary>The primaryButtonTextFocusColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryButtonTextFocusColor { get; set; }
#nullable restore
#else
        public string PrimaryButtonTextFocusColor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.SimpleThemeVariables"/> and sets the default values.
        /// </summary>
        public SimpleThemeVariables()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.SimpleThemeVariables"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.SimpleThemeVariables CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.SimpleThemeVariables();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alertBackgroundColor", n => { AlertBackgroundColor = n.GetStringValue(); } },
                { "alertFontColor", n => { AlertFontColor = n.GetStringValue(); } },
                { "backgroundImageURL", n => { BackgroundImageURL = n.GetStringValue(); } },
                { "backgroundSize", n => { BackgroundSize = n.GetStringValue(); } },
                { "borderRadius", n => { BorderRadius = n.GetStringValue(); } },
                { "deleteButtonColor", n => { DeleteButtonColor = n.GetStringValue(); } },
                { "deleteButtonFocusColor", n => { DeleteButtonFocusColor = n.GetStringValue(); } },
                { "deleteButtonTextColor", n => { DeleteButtonTextColor = n.GetStringValue(); } },
                { "deleteButtonTextFocusColor", n => { DeleteButtonTextFocusColor = n.GetStringValue(); } },
                { "errorFontColor", n => { ErrorFontColor = n.GetStringValue(); } },
                { "errorIconColor", n => { ErrorIconColor = n.GetStringValue(); } },
                { "fontColor", n => { FontColor = n.GetStringValue(); } },
                { "fontFamily", n => { FontFamily = n.GetStringValue(); } },
                { "footerDisplay", n => { FooterDisplay = n.GetBoolValue(); } },
                { "iconBackgroundColor", n => { IconBackgroundColor = n.GetStringValue(); } },
                { "iconColor", n => { IconColor = n.GetStringValue(); } },
                { "infoIconColor", n => { InfoIconColor = n.GetStringValue(); } },
                { "inputBackgroundColor", n => { InputBackgroundColor = n.GetStringValue(); } },
                { "inputIconColor", n => { InputIconColor = n.GetStringValue(); } },
                { "inputTextColor", n => { InputTextColor = n.GetStringValue(); } },
                { "linkTextColor", n => { LinkTextColor = n.GetStringValue(); } },
                { "linkTextFocusColor", n => { LinkTextFocusColor = n.GetStringValue(); } },
                { "logoImageSize", n => { LogoImageSize = n.GetStringValue(); } },
                { "logoImageURL", n => { LogoImageURL = n.GetStringValue(); } },
                { "monoFontColor", n => { MonoFontColor = n.GetStringValue(); } },
                { "monoFontFamily", n => { MonoFontFamily = n.GetStringValue(); } },
                { "pageBackgroundColor", n => { PageBackgroundColor = n.GetStringValue(); } },
                { "panelBackgroundColor", n => { PanelBackgroundColor = n.GetStringValue(); } },
                { "primaryButtonColor", n => { PrimaryButtonColor = n.GetStringValue(); } },
                { "primaryButtonFocusColor", n => { PrimaryButtonFocusColor = n.GetStringValue(); } },
                { "primaryButtonTextColor", n => { PrimaryButtonTextColor = n.GetStringValue(); } },
                { "primaryButtonTextFocusColor", n => { PrimaryButtonTextFocusColor = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alertBackgroundColor", AlertBackgroundColor);
            writer.WriteStringValue("alertFontColor", AlertFontColor);
            writer.WriteStringValue("backgroundImageURL", BackgroundImageURL);
            writer.WriteStringValue("backgroundSize", BackgroundSize);
            writer.WriteStringValue("borderRadius", BorderRadius);
            writer.WriteStringValue("deleteButtonColor", DeleteButtonColor);
            writer.WriteStringValue("deleteButtonFocusColor", DeleteButtonFocusColor);
            writer.WriteStringValue("deleteButtonTextColor", DeleteButtonTextColor);
            writer.WriteStringValue("deleteButtonTextFocusColor", DeleteButtonTextFocusColor);
            writer.WriteStringValue("errorFontColor", ErrorFontColor);
            writer.WriteStringValue("errorIconColor", ErrorIconColor);
            writer.WriteStringValue("fontColor", FontColor);
            writer.WriteStringValue("fontFamily", FontFamily);
            writer.WriteBoolValue("footerDisplay", FooterDisplay);
            writer.WriteStringValue("iconBackgroundColor", IconBackgroundColor);
            writer.WriteStringValue("iconColor", IconColor);
            writer.WriteStringValue("infoIconColor", InfoIconColor);
            writer.WriteStringValue("inputBackgroundColor", InputBackgroundColor);
            writer.WriteStringValue("inputIconColor", InputIconColor);
            writer.WriteStringValue("inputTextColor", InputTextColor);
            writer.WriteStringValue("linkTextColor", LinkTextColor);
            writer.WriteStringValue("linkTextFocusColor", LinkTextFocusColor);
            writer.WriteStringValue("logoImageSize", LogoImageSize);
            writer.WriteStringValue("logoImageURL", LogoImageURL);
            writer.WriteStringValue("monoFontColor", MonoFontColor);
            writer.WriteStringValue("monoFontFamily", MonoFontFamily);
            writer.WriteStringValue("pageBackgroundColor", PageBackgroundColor);
            writer.WriteStringValue("panelBackgroundColor", PanelBackgroundColor);
            writer.WriteStringValue("primaryButtonColor", PrimaryButtonColor);
            writer.WriteStringValue("primaryButtonFocusColor", PrimaryButtonFocusColor);
            writer.WriteStringValue("primaryButtonTextColor", PrimaryButtonTextColor);
            writer.WriteStringValue("primaryButtonTextFocusColor", PrimaryButtonTextFocusColor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
