// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace FusionAuth.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OAuth2Configuration : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authorizedOriginURLs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedOriginURLs { get; set; }
#nullable restore
#else
        public List<string> AuthorizedOriginURLs { get; set; }
#endif
        /// <summary>The authorizedRedirectURLs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedRedirectURLs { get; set; }
#nullable restore
#else
        public List<string> AuthorizedRedirectURLs { get; set; }
#endif
        /// <summary>The authorizedURLValidationPolicy property</summary>
        public global::FusionAuth.Sdk.Models.Oauth2AuthorizedURLValidationPolicy? AuthorizedURLValidationPolicy { get; set; }
        /// <summary>The clientAuthenticationPolicy property</summary>
        public global::FusionAuth.Sdk.Models.ClientAuthenticationPolicy? ClientAuthenticationPolicy { get; set; }
        /// <summary>The clientId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>The clientSecret property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>Controls the policy for requesting user permission to grant access to requested scopes during an OAuth workflow  for a third-party application.</summary>
        public global::FusionAuth.Sdk.Models.OAuthScopeConsentMode? ConsentMode { get; set; }
        /// <summary>The debug property</summary>
        public bool? Debug { get; set; }
        /// <summary>The deviceVerificationURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceVerificationURL { get; set; }
#nullable restore
#else
        public string DeviceVerificationURL { get; set; }
#endif
        /// <summary>The enabledGrants property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? EnabledGrants { get; set; }
#nullable restore
#else
        public UntypedNode EnabledGrants { get; set; }
#endif
        /// <summary>The generateRefreshTokens property</summary>
        public bool? GenerateRefreshTokens { get; set; }
        /// <summary>The logoutBehavior property</summary>
        public global::FusionAuth.Sdk.Models.LogoutBehavior? LogoutBehavior { get; set; }
        /// <summary>The logoutURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoutURL { get; set; }
#nullable restore
#else
        public string LogoutURL { get; set; }
#endif
        /// <summary>The proofKeyForCodeExchangePolicy property</summary>
        public global::FusionAuth.Sdk.Models.ProofKeyForCodeExchangePolicy? ProofKeyForCodeExchangePolicy { get; set; }
        /// <summary>The handling policy for scopes provided by FusionAuth</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FusionAuth.Sdk.Models.ProvidedScopePolicy? ProvidedScopePolicy { get; set; }
#nullable restore
#else
        public global::FusionAuth.Sdk.Models.ProvidedScopePolicy ProvidedScopePolicy { get; set; }
#endif
        /// <summary>The application&apos;s relationship to the authorization server. First-party applications will be granted implicit permission for requested scopes.  Third-party applications will use the {@link OAuthScopeConsentMode} policy.</summary>
        public global::FusionAuth.Sdk.Models.OAuthApplicationRelationship? Relationship { get; set; }
        /// <summary>The requireClientAuthentication property</summary>
        public bool? RequireClientAuthentication { get; set; }
        /// <summary>The requireRegistration property</summary>
        public bool? RequireRegistration { get; set; }
        /// <summary>Controls the policy for whether OAuth workflows will more strictly adhere to the OAuth and OIDC specification  or run in backwards compatibility mode.</summary>
        public global::FusionAuth.Sdk.Models.OAuthScopeHandlingPolicy? ScopeHandlingPolicy { get; set; }
        /// <summary>Policy for handling unknown OAuth scopes in the request</summary>
        public global::FusionAuth.Sdk.Models.UnknownScopePolicy? UnknownScopePolicy { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FusionAuth.Sdk.Models.OAuth2Configuration"/> and sets the default values.
        /// </summary>
        public OAuth2Configuration()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FusionAuth.Sdk.Models.OAuth2Configuration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FusionAuth.Sdk.Models.OAuth2Configuration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FusionAuth.Sdk.Models.OAuth2Configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorizedOriginURLs", n => { AuthorizedOriginURLs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "authorizedRedirectURLs", n => { AuthorizedRedirectURLs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "authorizedURLValidationPolicy", n => { AuthorizedURLValidationPolicy = n.GetEnumValue<global::FusionAuth.Sdk.Models.Oauth2AuthorizedURLValidationPolicy>(); } },
                { "clientAuthenticationPolicy", n => { ClientAuthenticationPolicy = n.GetEnumValue<global::FusionAuth.Sdk.Models.ClientAuthenticationPolicy>(); } },
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "clientSecret", n => { ClientSecret = n.GetStringValue(); } },
                { "consentMode", n => { ConsentMode = n.GetEnumValue<global::FusionAuth.Sdk.Models.OAuthScopeConsentMode>(); } },
                { "debug", n => { Debug = n.GetBoolValue(); } },
                { "deviceVerificationURL", n => { DeviceVerificationURL = n.GetStringValue(); } },
                { "enabledGrants", n => { EnabledGrants = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "generateRefreshTokens", n => { GenerateRefreshTokens = n.GetBoolValue(); } },
                { "logoutBehavior", n => { LogoutBehavior = n.GetEnumValue<global::FusionAuth.Sdk.Models.LogoutBehavior>(); } },
                { "logoutURL", n => { LogoutURL = n.GetStringValue(); } },
                { "proofKeyForCodeExchangePolicy", n => { ProofKeyForCodeExchangePolicy = n.GetEnumValue<global::FusionAuth.Sdk.Models.ProofKeyForCodeExchangePolicy>(); } },
                { "providedScopePolicy", n => { ProvidedScopePolicy = n.GetObjectValue<global::FusionAuth.Sdk.Models.ProvidedScopePolicy>(global::FusionAuth.Sdk.Models.ProvidedScopePolicy.CreateFromDiscriminatorValue); } },
                { "relationship", n => { Relationship = n.GetEnumValue<global::FusionAuth.Sdk.Models.OAuthApplicationRelationship>(); } },
                { "requireClientAuthentication", n => { RequireClientAuthentication = n.GetBoolValue(); } },
                { "requireRegistration", n => { RequireRegistration = n.GetBoolValue(); } },
                { "scopeHandlingPolicy", n => { ScopeHandlingPolicy = n.GetEnumValue<global::FusionAuth.Sdk.Models.OAuthScopeHandlingPolicy>(); } },
                { "unknownScopePolicy", n => { UnknownScopePolicy = n.GetEnumValue<global::FusionAuth.Sdk.Models.UnknownScopePolicy>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("authorizedOriginURLs", AuthorizedOriginURLs);
            writer.WriteCollectionOfPrimitiveValues<string>("authorizedRedirectURLs", AuthorizedRedirectURLs);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.Oauth2AuthorizedURLValidationPolicy>("authorizedURLValidationPolicy", AuthorizedURLValidationPolicy);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.ClientAuthenticationPolicy>("clientAuthenticationPolicy", ClientAuthenticationPolicy);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientSecret", ClientSecret);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.OAuthScopeConsentMode>("consentMode", ConsentMode);
            writer.WriteBoolValue("debug", Debug);
            writer.WriteStringValue("deviceVerificationURL", DeviceVerificationURL);
            writer.WriteObjectValue<UntypedNode>("enabledGrants", EnabledGrants);
            writer.WriteBoolValue("generateRefreshTokens", GenerateRefreshTokens);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.LogoutBehavior>("logoutBehavior", LogoutBehavior);
            writer.WriteStringValue("logoutURL", LogoutURL);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.ProofKeyForCodeExchangePolicy>("proofKeyForCodeExchangePolicy", ProofKeyForCodeExchangePolicy);
            writer.WriteObjectValue<global::FusionAuth.Sdk.Models.ProvidedScopePolicy>("providedScopePolicy", ProvidedScopePolicy);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.OAuthApplicationRelationship>("relationship", Relationship);
            writer.WriteBoolValue("requireClientAuthentication", RequireClientAuthentication);
            writer.WriteBoolValue("requireRegistration", RequireRegistration);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.OAuthScopeHandlingPolicy>("scopeHandlingPolicy", ScopeHandlingPolicy);
            writer.WriteEnumValue<global::FusionAuth.Sdk.Models.UnknownScopePolicy>("unknownScopePolicy", UnknownScopePolicy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
